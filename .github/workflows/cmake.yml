
name: Build
on: push

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:

    strategy:
      fail-fast: true
      matrix:
        include:
          - os: ubuntu-latest
            bin_subdir: ''
            app_suffix: ''
            exe_suffix: ''
            channel: linux
          - os: macos-latest
            bin_subdir: ''
            app_suffix: '.app'
            exe_suffix: ''
            channel: osx
          - os: windows-latest
            bin_subdir:  'Release/'
            app_suffix: '.exe'
            exe_suffix: '.exe'
            channel: windows

    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: 'recursive'

    - name: Linux Setup (OpenGL, ASound2)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install libgl1-mesa-dev libasound2-dev

    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{github.workspace}}/build

    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      working-directory: ${{github.workspace}}/build

      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE

    - name: Build
      working-directory: ${{github.workspace}}/build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build . --config $BUILD_TYPE

    - name: OSX, chmod +x
      if: runner.os == 'macOS'
      run: chmod +x ./bin/game_exe.app/Contents/MacOS/game_exe

    - name: Test
      working-directory: ${{github.workspace}}
      run: ./bin/${{matrix.bin_subdir}}game_test_exe${{matrix.exe_suffix}}
      
    - name: Artifacts Binaries
      uses: actions/upload-artifact@v3.1.0
      with:
        name: game-${{matrix.channel}}
        path: |
          bin/${{matrix.bin_subdir}}game_exe${{matrix.app_suffix}}
          bin/${{matrix.bin_subdir}}editor${{matrix.exe_suffix}}

    - name: Artifacts Resources
      uses: actions/upload-artifact@v3.1.0
      with:
        name: res
        path: |
          res/entities
          res/fonts
          res/sound
          res/sprites
          res/textures
          res/worlds
          res/game_config.json
          res/level_config.json
          res/pickup_config.json
          res/player_config.json
          res/region_config.json
          res/sound_config.json
          res/spawn_config.json
          res/weapon_config.json
          res/sprite_atlas.png

  deploy:
    strategy:
      fail-fast: true
      matrix:
        os: [ubuntu-latest]
        itch-channel: [linux, osx, windows]

    runs-on: ${{ matrix.os }}

    steps:
    - name: Prepare binaries
      uses: actions/download-artifact@v3.0.0
      with:
        name: game-${{matrix.itch-channel}}
        path: stage/game-${{matrix.itch-channel}}

    - name: Prepare resources
      uses: actions/download-artifact@v3.0.0
      with:
        name: res
        path: stage/game-${{matrix.itch-channel}}/res

    - name: Itch.io - Publish
      uses: KikimoraGames/itch-publish@v0.0.3
      with:
        butlerApiKey: ${{secrets.BUTLER_API_KEY}}
        itchUsername: ${{secrets.ITCH_USERNAME}}
        itchGameId: ${{ secrets.ITCH_GAME_ID }}
        buildChannel: ${{ matrix.itch-channel }}
        gameData: stage/game-${{matrix.itch-channel}}
